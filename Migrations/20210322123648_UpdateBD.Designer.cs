// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentOffice.Models.DataBase;

namespace StudentOffice.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20210322123648_UpdateBD")]
    partial class UpdateBD
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.Anketa", b =>
                {
                    b.Property<int>("AnketaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressFather")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressMother")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApartmentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("CertificateFirstHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("CertificateSecondHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("DateOfIssue")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfValidity")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("int");

                    b.Property<int>("EducationLevel")
                        .HasColumnType("int");

                    b.Property<string>("HomePhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HullNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IssuedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KinshipTypeFather")
                        .HasColumnType("int");

                    b.Property<int>("KinshipTypeMother")
                        .HasColumnType("int");

                    b.Property<byte[]>("MedicalCertificateFirstHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("MedicalCertificateSecondHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Middlename")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddlenameFather")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddlenameMother")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddlenameR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameFather")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameMother")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameOfSettlement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassportNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassportSeries")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneFather")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneMother")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceOfBirth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceOfWorkAndPosition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Postcode")
                        .HasColumnType("int");

                    b.Property<int>("Region")
                        .HasColumnType("int");

                    b.Property<byte[]>("RegistrationHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SeniorityGeneral")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeniorityProfileSpecialty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.Property<bool>("SocialBehavior")
                        .HasColumnType("bit");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("int");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StreetType")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurnameFather")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurnameMother")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurnameR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeOfSettlement")
                        .HasColumnType("int");

                    b.Property<byte[]>("XeracopyPassportFirstHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("XeracopyPassportSecondHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("YearOfEnding")
                        .HasColumnType("datetime2");

                    b.HasKey("AnketaId");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("Anketas");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.Audience", b =>
                {
                    b.Property<int>("AudienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AudienceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AudienceNameShort")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AudienceType")
                        .HasColumnType("int");

                    b.HasKey("AudienceId");

                    b.ToTable("Audiences");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.Couple", b =>
                {
                    b.Property<int>("CoupleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AudienceId")
                        .HasColumnType("int");

                    b.Property<int>("DisciplineId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsSubgroups")
                        .HasColumnType("bit");

                    b.Property<int>("Subgroups")
                        .HasColumnType("int");

                    b.Property<int>("TimeTableGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("TimeWindowId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CoupleId");

                    b.HasIndex("AudienceId");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("TimeTableGroupId");

                    b.HasIndex("TimeWindowId");

                    b.HasIndex("UserId");

                    b.ToTable("Couples");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.Discipline", b =>
                {
                    b.Property<int>("DisciplineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisciplineName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisciplineShortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DisciplineId");

                    b.ToTable("Disciplines");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.DocumentType", b =>
                {
                    b.Property<int>("DocumentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DocumentTypeId");

                    b.ToTable("DocumentTypes");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.Exam", b =>
                {
                    b.Property<int>("ExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ExamName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExamId");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Course")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("YearOfFormation")
                        .HasColumnType("datetime2");

                    b.HasKey("GroupId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.GroupDiscipline", b =>
                {
                    b.Property<int>("GroupDisciplineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisciplineId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.HasKey("GroupDisciplineId");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupDisciplines");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.GroupExam", b =>
                {
                    b.Property<int>("GroupExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.HasKey("GroupExamId");

                    b.HasIndex("ExamId");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupExams");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ImageId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.MainPlan", b =>
                {
                    b.Property<int>("MainPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("SelectionСommitteeId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MainPlanId");

                    b.HasIndex("SelectionСommitteeId");

                    b.HasIndex("UserId");

                    b.ToTable("MainPlans");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.Mark", b =>
                {
                    b.Property<int>("MarkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GroupDisciplineId")
                        .HasColumnType("int");

                    b.Property<int>("MarkUserId")
                        .HasColumnType("int");

                    b.Property<string>("MarkValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MarkId");

                    b.HasIndex("GroupDisciplineId");

                    b.HasIndex("MarkUserId");

                    b.ToTable("Marks");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.MarkExam", b =>
                {
                    b.Property<int>("MarkExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GroupExamId")
                        .HasColumnType("int");

                    b.Property<int>("MarkUserId")
                        .HasColumnType("int");

                    b.Property<int>("MarkValue")
                        .HasColumnType("int");

                    b.HasKey("MarkExamId");

                    b.HasIndex("GroupExamId");

                    b.HasIndex("MarkUserId");

                    b.ToTable("MarkExams");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.MarkLog", b =>
                {
                    b.Property<int>("MarkLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SemesterId")
                        .HasColumnType("int");

                    b.HasKey("MarkLogId");

                    b.HasIndex("SemesterId");

                    b.ToTable("MarkLogs");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.MarkUser", b =>
                {
                    b.Property<int>("MarkUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MarkLogId")
                        .HasColumnType("int");

                    b.Property<int>("OmissionId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MarkUserId");

                    b.HasIndex("MarkLogId");

                    b.HasIndex("OmissionId");

                    b.HasIndex("UserId");

                    b.ToTable("MarkUsers");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.Omission", b =>
                {
                    b.Property<int>("OmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Disrespectful")
                        .HasColumnType("int");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.HasKey("OmissionId");

                    b.ToTable("Omissions");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.SelectionСommittee", b =>
                {
                    b.Property<int>("SelectionСommitteeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("SelectionСommitteeId");

                    b.ToTable("SelectionСommitties");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.Semester", b =>
                {
                    b.Property<int>("SemesterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SemesterNumber")
                        .HasColumnType("int");

                    b.HasKey("SemesterId");

                    b.ToTable("Semesters");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.Specialization", b =>
                {
                    b.Property<int>("SpecializationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SpecializationName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpecializationId");

                    b.ToTable("Specializations");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.Specialty", b =>
                {
                    b.Property<int>("SpecialtyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Branch")
                        .HasColumnType("int");

                    b.Property<int>("EducationType")
                        .HasColumnType("int");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("int");

                    b.HasKey("SpecialtyId");

                    b.HasIndex("GroupId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("Specialties");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.Spravka", b =>
                {
                    b.Property<int>("SpravkaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Middlename")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeOfSpravkaId")
                        .HasColumnType("int");

                    b.HasKey("SpravkaId");

                    b.HasIndex("GroupId");

                    b.HasIndex("TypeOfSpravkaId");

                    b.ToTable("Spravkas");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.SpravkaOrder", b =>
                {
                    b.Property<int>("SpravkaOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTimeNow")
                        .HasColumnType("datetime2");

                    b.Property<int>("SpravkaId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SpravkaOrderId");

                    b.HasIndex("SpravkaId");

                    b.HasIndex("UserId");

                    b.ToTable("SpravkaOrders");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.TimeTable", b =>
                {
                    b.Property<int>("TimeTableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DayNumber")
                        .HasColumnType("int");

                    b.Property<string>("PatternType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SemesterId")
                        .HasColumnType("int");

                    b.HasKey("TimeTableId");

                    b.HasIndex("SemesterId");

                    b.ToTable("TimeTables");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.TimeTableGroup", b =>
                {
                    b.Property<int>("TimeTableGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("TimeTableId")
                        .HasColumnType("int");

                    b.HasKey("TimeTableGroupId");

                    b.HasIndex("GroupId");

                    b.HasIndex("TimeTableId");

                    b.ToTable("TimeTableGroups");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.TimeWindow", b =>
                {
                    b.Property<int>("TimeWindowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("FirstHalf")
                        .HasColumnType("bit");

                    b.Property<bool>("SecondHalf")
                        .HasColumnType("bit");

                    b.Property<string>("TimeWindowName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TimeWindowId");

                    b.ToTable("TimeWindows");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.TypeOfSpravka", b =>
                {
                    b.Property<int>("TypeOfSpravkaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TypeOfSpravkaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeOfSpravkaId");

                    b.ToTable("TypeOfSpravkas");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("AnketaId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AnketaId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("StudentOffice.Models.DataBase.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("StudentOffice.Models.DataBase.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentOffice.Models.DataBase.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("StudentOffice.Models.DataBase.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.Anketa", b =>
                {
                    b.HasOne("StudentOffice.Models.DataBase.DocumentType", "DocumentType")
                        .WithMany("Anketas")
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentOffice.Models.DataBase.Specialty", "Specialty")
                        .WithMany("Anketas")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentType");

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.Couple", b =>
                {
                    b.HasOne("StudentOffice.Models.DataBase.Audience", "Audience")
                        .WithMany("Couples")
                        .HasForeignKey("AudienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentOffice.Models.DataBase.Discipline", "Discipline")
                        .WithMany("Couples")
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentOffice.Models.DataBase.TimeTableGroup", "TimeTableGroup")
                        .WithMany("Couples")
                        .HasForeignKey("TimeTableGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentOffice.Models.DataBase.TimeWindow", "TimeWindow")
                        .WithMany("Couples")
                        .HasForeignKey("TimeWindowId");

                    b.HasOne("StudentOffice.Models.DataBase.User", "User")
                        .WithMany("Couples")
                        .HasForeignKey("UserId");

                    b.Navigation("Audience");

                    b.Navigation("Discipline");

                    b.Navigation("TimeTableGroup");

                    b.Navigation("TimeWindow");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.GroupDiscipline", b =>
                {
                    b.HasOne("StudentOffice.Models.DataBase.Discipline", "Discipline")
                        .WithMany("GroupDisciplines")
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentOffice.Models.DataBase.Group", "Group")
                        .WithMany("GroupDisciplines")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discipline");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.GroupExam", b =>
                {
                    b.HasOne("StudentOffice.Models.DataBase.Exam", "Exam")
                        .WithMany("GroupExams")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentOffice.Models.DataBase.Group", "Group")
                        .WithMany("GroupExams")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.MainPlan", b =>
                {
                    b.HasOne("StudentOffice.Models.DataBase.SelectionСommittee", "GetSelectionСommittee")
                        .WithMany("MainPlans")
                        .HasForeignKey("SelectionСommitteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentOffice.Models.DataBase.User", "User")
                        .WithMany("MainPlans")
                        .HasForeignKey("UserId");

                    b.Navigation("GetSelectionСommittee");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.Mark", b =>
                {
                    b.HasOne("StudentOffice.Models.DataBase.GroupDiscipline", "GroupDiscipline")
                        .WithMany("Marks")
                        .HasForeignKey("GroupDisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentOffice.Models.DataBase.MarkUser", "MarkUser")
                        .WithMany("Marks")
                        .HasForeignKey("MarkUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupDiscipline");

                    b.Navigation("MarkUser");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.MarkExam", b =>
                {
                    b.HasOne("StudentOffice.Models.DataBase.GroupExam", "GroupExam")
                        .WithMany("MarkExams")
                        .HasForeignKey("GroupExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentOffice.Models.DataBase.MarkUser", "MarkUser")
                        .WithMany("MarkExams")
                        .HasForeignKey("MarkUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupExam");

                    b.Navigation("MarkUser");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.MarkLog", b =>
                {
                    b.HasOne("StudentOffice.Models.DataBase.Semester", "Semester")
                        .WithMany("MarkLogs")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.MarkUser", b =>
                {
                    b.HasOne("StudentOffice.Models.DataBase.MarkLog", "MarkLog")
                        .WithMany("MarkUsers")
                        .HasForeignKey("MarkLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentOffice.Models.DataBase.Omission", "Omission")
                        .WithMany("MarkUsers")
                        .HasForeignKey("OmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentOffice.Models.DataBase.User", "User")
                        .WithMany("MarkUsers")
                        .HasForeignKey("UserId");

                    b.Navigation("MarkLog");

                    b.Navigation("Omission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.Specialty", b =>
                {
                    b.HasOne("StudentOffice.Models.DataBase.Group", "Group")
                        .WithMany("Specialties")
                        .HasForeignKey("GroupId");

                    b.HasOne("StudentOffice.Models.DataBase.Specialization", "Specialization")
                        .WithMany("Specialties")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.Spravka", b =>
                {
                    b.HasOne("StudentOffice.Models.DataBase.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentOffice.Models.DataBase.TypeOfSpravka", "TypeOfSpravka")
                        .WithMany("Spravkas")
                        .HasForeignKey("TypeOfSpravkaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("TypeOfSpravka");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.SpravkaOrder", b =>
                {
                    b.HasOne("StudentOffice.Models.DataBase.Spravka", "Spravka")
                        .WithMany("SpravkaOrders")
                        .HasForeignKey("SpravkaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentOffice.Models.DataBase.User", "User")
                        .WithMany("SpravkaOrders")
                        .HasForeignKey("UserId");

                    b.Navigation("Spravka");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.TimeTable", b =>
                {
                    b.HasOne("StudentOffice.Models.DataBase.Semester", "Semester")
                        .WithMany("TimeTables")
                        .HasForeignKey("SemesterId");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.TimeTableGroup", b =>
                {
                    b.HasOne("StudentOffice.Models.DataBase.Group", "Group")
                        .WithMany("TimeTableGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentOffice.Models.DataBase.TimeTable", "TimeTable")
                        .WithMany("TimeTableGroups")
                        .HasForeignKey("TimeTableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("TimeTable");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.User", b =>
                {
                    b.HasOne("StudentOffice.Models.DataBase.Anketa", "Anketa")
                        .WithMany("Users")
                        .HasForeignKey("AnketaId");

                    b.Navigation("Anketa");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.Anketa", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.Audience", b =>
                {
                    b.Navigation("Couples");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.Discipline", b =>
                {
                    b.Navigation("Couples");

                    b.Navigation("GroupDisciplines");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.DocumentType", b =>
                {
                    b.Navigation("Anketas");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.Exam", b =>
                {
                    b.Navigation("GroupExams");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.Group", b =>
                {
                    b.Navigation("GroupDisciplines");

                    b.Navigation("GroupExams");

                    b.Navigation("Specialties");

                    b.Navigation("TimeTableGroups");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.GroupDiscipline", b =>
                {
                    b.Navigation("Marks");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.GroupExam", b =>
                {
                    b.Navigation("MarkExams");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.MarkLog", b =>
                {
                    b.Navigation("MarkUsers");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.MarkUser", b =>
                {
                    b.Navigation("MarkExams");

                    b.Navigation("Marks");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.Omission", b =>
                {
                    b.Navigation("MarkUsers");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.SelectionСommittee", b =>
                {
                    b.Navigation("MainPlans");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.Semester", b =>
                {
                    b.Navigation("MarkLogs");

                    b.Navigation("TimeTables");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.Specialization", b =>
                {
                    b.Navigation("Specialties");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.Specialty", b =>
                {
                    b.Navigation("Anketas");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.Spravka", b =>
                {
                    b.Navigation("SpravkaOrders");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.TimeTable", b =>
                {
                    b.Navigation("TimeTableGroups");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.TimeTableGroup", b =>
                {
                    b.Navigation("Couples");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.TimeWindow", b =>
                {
                    b.Navigation("Couples");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.TypeOfSpravka", b =>
                {
                    b.Navigation("Spravkas");
                });

            modelBuilder.Entity("StudentOffice.Models.DataBase.User", b =>
                {
                    b.Navigation("Couples");

                    b.Navigation("MainPlans");

                    b.Navigation("MarkUsers");

                    b.Navigation("SpravkaOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
